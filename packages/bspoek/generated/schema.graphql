### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type BatchPayload {
  count: Int!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

"""DateTime"""
scalar DateTime

type Mutation {
  createOnePost(data: PostCreateInput!): Post!
  createOneUser(data: UserCreateInput!): User!
  deleteManyPost(where: MutationDeleteManyPostWhereInput): BatchPayload!
  deleteManyUser(where: MutationDeleteManyUserWhereInput): BatchPayload!
  deleteOnePost(where: PostWhereUniqueInput!): Post
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManyPost(data: PostUpdateManyMutationInput!, where: MutationUpdateManyPostWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: MutationUpdateManyUserWhereInput): BatchPayload!
  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOnePost(create: PostCreateInput!, update: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input MutationDeleteManyPostFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input MutationDeleteManyPostWhereInput {
  AND: [MutationDeleteManyPostWhereInput!]
  author: MutationDeleteManyPostWhereInput
  content: NullableStringFilter
  createdAt: MutationDeleteManyPostFilter
  id: StringFilter
  NOT: [MutationDeleteManyPostWhereInput!]
  OR: [MutationDeleteManyPostWhereInput!]
  published: BooleanFilter
  title: StringFilter
  updatedAt: MutationDeleteManyPostFilter
}

input MutationDeleteManyUserFilter {
  every: MutationDeleteManyUserWhereInput
  none: MutationDeleteManyUserWhereInput
  some: MutationDeleteManyUserWhereInput
}

input MutationDeleteManyUserWhereInput {
  AND: [MutationDeleteManyUserWhereInput!]
  email: StringFilter
  id: StringFilter
  name: NullableStringFilter
  NOT: [MutationDeleteManyUserWhereInput!]
  OR: [MutationDeleteManyUserWhereInput!]
  posts: MutationDeleteManyUserFilter
}

input MutationUpdateManyPostFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input MutationUpdateManyPostWhereInput {
  AND: [MutationUpdateManyPostWhereInput!]
  author: MutationUpdateManyPostWhereInput
  content: NullableStringFilter
  createdAt: MutationUpdateManyPostFilter
  id: StringFilter
  NOT: [MutationUpdateManyPostWhereInput!]
  OR: [MutationUpdateManyPostWhereInput!]
  published: BooleanFilter
  title: StringFilter
  updatedAt: MutationUpdateManyPostFilter
}

input MutationUpdateManyUserFilter {
  every: MutationUpdateManyUserWhereInput
  none: MutationUpdateManyUserWhereInput
  some: MutationUpdateManyUserWhereInput
}

input MutationUpdateManyUserWhereInput {
  AND: [MutationUpdateManyUserWhereInput!]
  email: StringFilter
  id: StringFilter
  name: NullableStringFilter
  NOT: [MutationUpdateManyUserWhereInput!]
  OR: [MutationUpdateManyUserWhereInput!]
  posts: MutationUpdateManyUserFilter
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Post {
  author: User
  content: String
  createdAt: DateTime!
  id: ID!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
}

input PostCreateInput {
  author: UserCreateOneWithoutAuthorInput
  content: String
  id: ID
  published: Boolean!
  title: String!
}

input PostCreateManyWithoutPostsInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateWithoutAuthorInput {
  content: String
  id: ID
  published: Boolean!
  title: String!
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  content: String
  content_contains: String
  content_ends_with: String
  content_gt: String
  content_gte: String
  content_in: [String!]
  content_lt: String
  content_lte: String
  content_not: String
  content_not_contains: String
  content_not_ends_with: String
  content_not_in: [String!]
  content_not_starts_with: String
  content_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  published: Boolean
  published_not: Boolean
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input PostUpdateInput {
  author: UserUpdateOneWithoutPostsInput
  content: String
  published: Boolean
  title: String
}

input PostUpdateManyDataInput {
  content: String
  published: Boolean
  title: String
}

input PostUpdateManyMutationInput {
  content: String
  published: Boolean
  title: String
}

input PostUpdateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateManyWithWhereNestedInput {
  data: PostUpdateManyDataInput!
  where: PostScalarWhereInput!
}

input PostUpdateWithoutAuthorDataInput {
  content: String
  published: Boolean
  title: String
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUpdateWithoutAuthorDataInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  update: PostUpdateWithoutAuthorDataInput!
  where: PostWhereUniqueInput!
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  findManyPost(after: String, before: String, first: Int, last: Int, skip: Int): [Post!]
  findManyUser(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
  findOnePost(where: PostWhereUniqueInput!): Post
  findOneUser(where: UserWhereUniqueInput!): User
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  email: String!
  id: ID!
  name: String
  posts(after: String, before: String, first: Int, last: Int, skip: Int): [Post!]
}

input UserCreateInput {
  email: String!
  id: ID
  name: String
  posts: PostCreateManyWithoutPostsInput
}

input UserCreateOneWithoutAuthorInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
}

input UserCreateWithoutPostsInput {
  email: String!
  id: ID
  name: String
}

input UserUpdateInput {
  email: String
  name: String
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  email: String
  name: String
}

input UserUpdateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutPostsDataInput {
  email: String
  name: String
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsDataInput!
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
